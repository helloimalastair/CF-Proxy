import { IRequest, RouteHandler, RouterType, UniversalRoute } from 'itty-router';
import { RouterOptions } from './types';
import { OpenAPIRegistryMerger } from './zod/registry';
import { OpenAPIObject } from 'openapi3-ts/oas31';
export type Route = <RequestType = IRequest, Args extends any[] = any[], RT = OpenAPIRouterType>(path: string, ...handlers: (RouteHandler<RequestType, Args> | OpenAPIRouterType | any)[]) => RT;
export type OpenAPIRouterType<R = Route, Args extends any[] = any[]> = {
    original: RouterType<R>;
    schema: OpenAPIObject;
    registry: OpenAPIRegistryMerger;
} & RouterType<R>;
type Equal<X, Y> = (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2 ? true : false;
export declare function OpenAPIRouter<RequestType = IRequest, Args extends any[] = any[], RouteType = Equal<RequestType, IRequest> extends true ? Route : UniversalRoute<RequestType, Args>>(options?: RouterOptions): OpenAPIRouterType<RouteType, Args>;
export {};
